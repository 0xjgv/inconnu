
{
  "status": "ok",
  "issue": {
    "id": "2c0dce32-eccf-4814-96c5-57a51e8ca100",
    "scan_id": "c9a5b7a3-4470-427b-9b1f-b1149b72f3f0",
    "status": "open",
    "urgency": "LO",
    "created_at": "2025-07-11T15:07:25.592Z",
    "classification": {
      "id": "CWE-625",
      "name": "Permissive Regular Expression",
      "description": "The product uses a regular expression that does not sufficiently restrict the set of allowed values."
    },
    "location": {
      "file": {
        "name": "patterns.py",
        "language": "python",
        "path": "inconnu/nlp/patterns.py"
      },
      "line_number": 110,
      "project": {
        "name": "build",
        "branch": "main",
        "git_sha": "7257bc0f80f9b5656bf6d1309fcd2454affc733d"
      }
    },
    "details": {
      "explanation": "The regex for validating emails is too simple and may accept invalid or malicious inputs, risking bad data processing or security issues.<br><br>- The pattern \"r\"[a-z0-9\\.\\-+_]+@[a-z0-9\\.\\-+_]+\\.[a-z]+\" \" allows unusual characters or missing domain parts.<br>- Attackers can bypass validation by using crafted emails like \"test@domain@bad.com\" or \"user@domain..com\".<br>- This weak check risks processing incorrect emails and may expose the system to injection or spam attacks."
    },
    "auto_triage": {
      "false_positive_detection": {
        "status": "valid",
        "reasoning": "The <code>EMAIL_ADDRESS_PATTERN</code> at line 110 uses a very simplistic regex that allows for multiple consecutive dots and does not validate the domain portion to restrict to valid TLDs or prevent leading/trailing dots in the local part. This makes it possible to accept invalid or malformed email addresses, which aligns with the CWE-625 description. Since this regex is used for email address validation, it does pose a genuine issue rather than a false positive."
      }
    },
    "auto_fix_suggestion": {
      "id": "e6634065-5dc5-49ac-850b-e5fe0b1c59f9",
      "status": "fix_available",
      "patch": {
        "diff": "diff --git a/inconnu/nlp/patterns.py b/inconnu/nlp/patterns.py\nindex ed4774b..f61a581 100644\n--- a/inconnu/nlp/patterns.py\n+++ b/inconnu/nlp/patterns.py\n@@ -107,7 +107,12 @@ EMAIL_DATETIMETZ_PATTERN = (\n )\n EMAIL_DATETIMETZ_PATTERN_RE = re.compile(EMAIL_DATETIMETZ_PATTERN)\n \n-EMAIL_ADDRESS_PATTERN = r\"[a-z0-9\\.\\-+_]+@[a-z0-9\\.\\-+_]+\\.[a-z]+\"\n+EMAIL_ADDRESS_PATTERN = (\n+    r\"(?:[a-z0-9_+\\-]+(?:\\.[a-z0-9_+\\-]+)*)\"  # local part: no leading/trailing/consecutive dots\n+    r\"@\"\n+    r\"(?:[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?\\.)+\"  # domain: hyphens allowed, not at start/end\n+    r\"[a-z]{2,}\"  # TLD: at least two alpha chars\n+)\n EMAIL_ADDRESS_PATTERN_RE = re.compile(EMAIL_ADDRESS_PATTERN)\n \n ENDS_IN_PUNCT_PATTERN = r\"[^\\w\\s]\\Z\"\n",
        "explanation": "The fix improves the email regex by strictly validating the local part, domain, and TLD structure, preventing invalid emails with leading/trailing dots or improper domain formatting, thus mitigating potential regex-based validation bypasses.\n- The local part regex now disallows leading, trailing, and consecutive dots via <code>r\"(?:[a-z0-9_+\\-]+(?:\\.[a-z0-9_+\\-]+)*)\"</code>.\n- The domain part ensures each label starts and ends with alphanumerics, allowing hyphens only inside, using <code>r\"(?:[a-z0-9](?:[a-z0-9\\-]{0,61}[a-z0-9])?\\.)+\"</code>.\n- The TLD requires at least two alphabetic characters, enforced by <code>r\"[a-z]{2,}\"</code>, preventing single-letter or numeric TLDs.\n- Overall, the new pattern restricts email format more tightly, reducing acceptance of malformed or potentially malicious inputs."
      },
      "full_code": null
    }
  }
}
